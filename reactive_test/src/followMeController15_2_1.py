import sqlite3 


class FollowCtrl15_2_1(object):
    """Mealy transducer.

    Internal states are integers, the current state
    is stored in the attribute "state".
    To take a transition, call method "move".

    The names of input variables are stored in the
    attribute "input_vars".

    Automatically generated by tulip.dumpsmach on 2017-06-27 15:09:34 UTC
    To learn more about TuLiP, visit http://tulip-control.org
    """
    def __init__(self):
        self.state = 14198
        self.input_vars = ['sys_delta_row', 'env1', 'sys_delta_col']
        self.database = sqlite3.connect("FollowCtrl15_2_1_db.db")
        self.database.row_factory = sqlite3.Row
        self.cursor = self.database.cursor()

    def move(self, sys_delta_row, env1, sys_delta_col):
        """Given inputs, take move and return outputs.

        @rtype: dict
        @return: dictionary with keys of the output variable names:
            ['loc']
        """
        output = dict()
        req_arg = dict()
        req_arg["current_state"] = self.state
        req_arg["sys_delta_row"]=int(sys_delta_row)
        req_arg["env1"]=int(env1)
        req_arg["sys_delta_col"]=int(sys_delta_col)
        self.cursor.execute("select next_state,loc from state_trans where current_state=:current_state and sys_delta_row=:sys_delta_row and env1=:env1 and sys_delta_col=:sys_delta_col",req_arg)
        res = self.cursor.fetchone()
        if res is not None:
            (self.state,output["loc"])=(res["next_state"],res["loc"])
        else:
            self.cursor.execute("select is_dead_end_state from state_trans where current_state="+str(self.state))
            res_else = self.cursor.fetchone()
            if res_else is not None and res_else["is_dead_end_state"] == 1:
                raise Exception("Reached dead-end state !")
            elif res_else is not None:
                self._error(sys_delta_row, env1, sys_delta_col)
            else:
                raise Exception("Unrecognized state : state = "+str(self.state))
        return output

    def _error(self, sys_delta_row, env1, sys_delta_col):
        raise ValueError("Unrecognized input: " + (
            "sys_delta_row = {sys_delta_row}; "
            "env1 = {env1}; "
            "sys_delta_col = {sys_delta_col}; ").format(
                sys_delta_row=sys_delta_row,
                env1=env1,
                sys_delta_col=sys_delta_col))
