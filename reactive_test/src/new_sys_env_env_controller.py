import sqlite3 


class new_sys_env_envController(object):
    """Mealy transducer.

    Internal states are integers, the current state
    is stored in the attribute "state".
    To take a transition, call method "move".

    The names of input variables are stored in the
    attribute "input_vars".

    Automatically generated by tulip.dumpsmach on 2017-08-22 11:36:37 UTC
    To learn more about TuLiP, visit http://tulip-control.org
    """
    def __init__(self):
        self.state = 654
        self.input_vars = ['Quad8', 'target_Quad10']
        self.database = sqlite3.connect("new_sys_env_envController_db.db")
        self.database.row_factory = sqlite3.Row
        self.cursor = self.database.cursor()

    def move(self, Quad8, target_Quad10):
        """Given inputs, take move and return outputs.

        @rtype: dict
        @return: dictionary with keys of the output variable names:
            ['follow_complete', 'stage_Quad10', 'Quad10']
        """
        output = dict()
        req_arg = dict()
        req_arg["current_state"] = self.state
        req_arg["Quad8"]=int(Quad8)
        req_arg["target_Quad10"]=int(target_Quad10)
        self.cursor.execute("select next_state,follow_complete,stage_Quad10,Quad10 from state_trans where current_state=:current_state and Quad8=:Quad8 and target_Quad10=:target_Quad10",req_arg)
        res = self.cursor.fetchone()
        if res is not None:
            (self.state,output["follow_complete"],output["stage_Quad10"],output["Quad10"])=(res["next_state"],res["follow_complete"],res["stage_Quad10"],res["Quad10"])
        else:
            self.cursor.execute("select is_dead_end_state from state_trans where current_state="+str(self.state))
            res_else = self.cursor.fetchone()
            if res_else is not None and res_else["is_dead_end_state"] == 1:
                raise Exception("Reached dead-end state !")
            elif res_else is not None:
                self._error(Quad8, target_Quad10)
            else:
                raise Exception("Unrecognized state : state = "+str(self.state))
        return output

    def _error(self, Quad8, target_Quad10):
        raise ValueError("Unrecognized input: " + (
            "Quad8 = {Quad8}; "
            "target_Quad10 = {target_Quad10}; ").format(
                Quad8=Quad8,
                target_Quad10=target_Quad10))
